function loadJS(e,o,t){var i=!!window.ActiveXObject,n=i&&!window.XMLHttpRequest,a=document.createElement("script"),r=n?document.documentElement:document.getElementsByTagName("head")[0];a.type="text/javascript",a.async=!0,a.readyState?a.onreadystatechange=function(){"loaded"!=a.readyState&&"complete"!=a.readyState||(a.onreadystatechange=null,o&&o())}:a.onload=function(){o&&o()},a.src=e,t?document.getElementById(t).appendChild(a):r.insertBefore(a,r.firstChild)}$.fn.extend({isOnScreenVisible:function(){if(!$("body").hasClass("post-template"))return!1;var e=$(window),o={top:e.scrollTop(),left:e.scrollLeft()};o.right=o.left+e.width(),o.bottom=o.top+e.height();var t=this.offset();return t.right=t.left+this.outerWidth(),t.bottom=t.top+this.outerHeight(),!(o.right<t.left||o.left>t.right||o.bottom<t.top||o.top>t.bottom)}});var General={isMobile:!1,isWechat:!1,viewWidth:$(window).width(),absUrl:location.protocol+"//"+location.host,init:function(){var e=window,o=(e.document,navigator.userAgent.toLowerCase()),t=e.navigator.appVersion.match(/android/gi);e.navigator.appVersion.match(/iphone/gi);"micromessenger"==o.match(/MicroMessenger/i)&&(General.isWechat=!0,$("body").addClass("wechat-webview")),t&&(General.isMobile=!0),$("body").hasClass("post-template")&&(General.updateImageWidth(),General.rewardLoader()),General.webFontLoader(),General.scrollToPos()},updateImageWidth:function(){function e(){var e=$(this),o=t.outerWidth(),i=this.naturalWidth;i>=o?e.addClass("full-img"):e.removeClass("full-img")}function o(){i.each(e)}var t=$(".post-content"),i=$(".single-post-inner img").on("load",e);o()},webFontLoader:function(){WebFontConfig={loading:function(){},custom:{families:["Open Sans","iconfont","fontawesome"],urls:[General.absUrl+"/assets/css/font.min.css","https://img.halfrost.com/fontss/iconfont.css",General.absUrl+"/assets/css/font-awesome.min.css"]}},loadJS(General.absUrl+"/assets/js/webfont.js",function(){WebFont.load({custom:{families:["Open Sans","iconfont","fontawesome"]}})})},scrollToPos:function(e){var o="我要飞到最高",t=(e||$(window).height(),$('<a href="#" id="to-top" title="'+o+'"> <div class="to-top-wrap"></div></a>').appendTo("body"));$(window).scroll(function(){$(window).scrollTop()>$(window).height()?t.fadeIn(500):t.fadeOut(500)}),t.click(function(e){e.preventDefault(),$("html,body").animate({scrollTop:0},666,function(){window.location.hash="#"})})},urlIconlize:function(e){var o,t,i={twitter:"iconfont-twitter icon-iconfonttwitter",qzone:"iconfont-qzone icon-qzone",weibo:"iconfont-weibo icon-iconfontweibo",facebook:"iconfont-facebook icon-iconfontfacebook",github:"iconfont-github icon-github",douban:"iconfont-douban icon-iconfontdouban",google:"iconfont-google icon-iconfontgoogle",luolei:"iconfont-luolei icon-luolei",dribble:"iconfont-dribble icon-dribbblecircled",v2ex:"iconfont-v2ex icon-iconfontv2ex",zhihu:"iconfont-zhihu icon-iconfontzhihu",wikipedia:"iconfont-wikipedia icon-iconfontwikipedia",jianshu:"iconfont-jianshu icon-jianshu",youku:"iconfont-youku icon-iconfontyouku",youtube:"iconfont-youtube icon-youtube",juejin:"iconfont-juejin icon-juejin",weixin:"iconfont-weixin icon-iconfontwechat",segmentfault:"iconfont-sf icon-iconsf-copy"};for(var n in i)if("function"!=typeof i[n]){var a=n;e.indexOf(a)>=0&&(o=a,t=i[a])}return t},addIcons:function(){$(".single-post-inner  a:not(:has(img))").each(function(e){var o=$(this).attr("href"),t=document.createElement("a");t.href=o,_selfDomain=t.hostname,General.urlIconlize(_selfDomain),$(this).prepend('<i class="iconfont '+General.urlIconlize(_selfDomain)+'"></i>');var i=$(this).find("i").css("color"),n=$(this).css("color");$(this).hover(function(){$(this).css("color",i),$(this).addClass("animated pulse")},function(){$(this).css("color",n),$(this).removeClass("animated pulse")})})},rewardLoader:function(){var e={alipay:"/assets/images/qr-alipay-255.png",wechat:"/assets/images/qr-wechat-255.png"};General.isWechat&&$(".wechat-code b").html("长按上方二维码打赏作者"),$(".money-like .reward-button").hover(function(){$("img.wechat-img").attr("src",e.wechat),$("img.alipay-img").attr("src",e.alipay),$(".money-code").fadeIn(),$(this).addClass("active")},function(){$(".money-code").fadeOut(),$(this).removeClass("active")},800),$(".money-like .reward-button").click(function(){$(this).hasClass("active")?($(this).find("img.wechat-img").attr("src",e.wechat),$(this).find("img.alipay-img").attr("src",e.alipay),$(".money-code").fadeOut(),$(this).removeClass("active")):($(".money-code").fadeIn(),$(this).addClass("active"))})}},ImageSmartLoader={isWebPSupported:!1,isImageCompressed:!1,init:function(){ImageSmartLoader.webPCheck()},isCompressedCheck:function(){},webPCheck:function(e,o){var t={demo:"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAsAAAABBxAREYiI/gcAAABWUDggGAAAADABAJ0BKgEAAQABABwlpAADcAD+/gbQAA=="},i=new Image;i.onload=function(){i.width>0&&i.height>0;ImageSmartLoader.isWebPSupported=!0,ImageSmartLoader.webPLoader()},i.onerror=function(){ImageSmartLoader.isWebPSupported=!1,ImageSmartLoader.webPLoader()},i.src="data:image/webp;base64,"+t.demo},imgLoader:function(){},webPLoader:function(){if(ImageSmartLoader.isWebPSupported===!0){if(768==General.viewWidth)return $(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!0,is_scale:!1}),!1;General.viewWidth<768?$(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!0,is_scale:!0,scale_width:750}):$(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!0,is_scale:!1})}else{if(768==General.viewWidth)return $(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!1,is_scale:!0,scale_width:1500}),!1;General.viewWidth<768?$(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!1,is_scale:!0,scale_width:750}):$(".lazy").lazyload({advanced_load:!1,data_attribute:"url",webP_load:!1,is_scale:!1})}}};$(document).ready(function(){var e=$(window),o=document.getElementById("scroll-hint");if(null!==o&&($(".header-scroll-hint").on("click",function(e){var o=$(this).closest(".cover");$("html, body").animate({scrollTop:o.position().top+o.height()},400),e.preventDefault()}),window.addEventListener("load",function(){var e=window.pageYOffset||document.documentElement.scrollTop;e>0?o.classList.remove("visible"):o.classList.add("visible")}),window.addEventListener("scroll",function(){var e=window.pageYOffset||document.documentElement.scrollTop;e>0?o.classList.remove("visible"):o.classList.add("visible")})),$("#toc").initTOC({selector:"h1, h2, h3, h4, h5, h6",scope:"article",overwrite:!1,prefix:"toc"}),$(".sidebar-toggle").on("click",function(e){$("body").hasClass("sidebar-opened")?($("body").removeClass("sidebar-opened"),$("body").css("overflow","scroll")):($("body").addClass("sidebar-opened"),$("body").css("overflow","hidden")),e.preventDefault()}),$(".search-toggle").on("click",function(e){$("body").hasClass("search-opened")?($("body").removeClass("search-opened"),$("body").css("overflow","scroll"),searchField.clear()):($("body").addClass("search-opened"),$("body").css("overflow","hidden"),setTimeout(function(){$("#search-field").focus()},300)),e.preventDefault()}),$(".overlay").on("click",function(e){$("body").removeClass("sidebar-opened search-opened"),$("body").css("overflow","scroll"),searchField.clear(),e.preventDefault()}),"undefined"!=typeof disqus_shortname){var t=!1;$(".comments-title").on("click",function(){var e=$(this);t?($("#disqus_thread").slideToggle(),e.hasClass("toggled-on")?e.removeClass("toggled-on"):e.addClass("toggled-on")):($.ajax({type:"GET",url:"//"+disqus_shortname+".disqus.com/embed.js",dataType:"script",cache:!0}),e.addClass("toggled-on"),t=!0)})}$.fn.lazyload=function(o){function t(){var e=0;n.each(function(){var o=$(this);if(!a.skip_invisible||o.is(":visible"))if($.abovethetop(this,a)||$.leftofbegin(this,a));else if($.belowthefold(this,a)||$.rightoffold(this,a)){if(++e>a.failure_limit)return!1}else o.trigger("appear"),e=0})}var i,n=this,a={threshold:0,failure_limit:0,event:"scroll",effect:"show",container:window,data_attribute:"original",skip_invisible:!1,appear:null,load:null,placeholder:"",advanced_load:!1,webP_load:!1,is_scale:!1,scale_width:750};return o&&(void 0!==o.failurelimit&&(o.failure_limit=o.failurelimit,delete o.failurelimit),void 0!==o.effectspeed&&(o.effect_speed=o.effectspeed,delete o.effectspeed),$.extend(a,o)),i=void 0===a.container||a.container===window?e:$(a.container),0===a.event.indexOf("scroll")&&i.bind(a.event,function(){return t()}),this.each(function(){var e=this,o=$(e);e.loaded=!1,void 0!==o.attr("src")&&o.attr("src")!==!1||o.is("img")&&(o.attr("src",a.placeholder),o.addClass("loading")),o.one("appear",function(){if(!this.loaded){if(a.appear){var t=n.length;a.appear.call(e,t,a)}var i=o.attr("data-"+a.data_attribute);void 0===i&&(i=o.attr("src")),void 0===i&&(i=o.style.backgroundImage),void 0!==i&&i.indexOf("img.halfrost.com")>-1&&(a.advanced_load===!0&&(i+="?imageView2"),a.is_scale===!0&&(i+="/0/w/"+a.scale_width),a.webP_load===!0&&a.is_scale===!1&&(i+="/0/format/webp"),a.webP_load===!0&&a.is_scale===!0&&(i+="/format/webp"),a.webP_load===!1&&i.indexOf("https://img.halfrost.com/Blog/ArticleTitleImage/background-cover_.png")>-1&&(i="https://img.halfrost.com/Blog/ArticleTitleImage/background-cover_.png")),$("<img />").bind("load",function(){o.hide(),o.is("img")?o.attr("src",i):o.css("background-image","url('"+i+"')"),o[a.effect](a.effect_speed),e.loaded=!0;var t=$.grep(n,function(e){return!e.loaded});if(n=$(t),a.load){var r=n.length;a.load.call(e,r,a)}o.removeClass("loading")}).attr("src",i)}}),0!==a.event.indexOf("scroll")&&o.bind(a.event,function(){e.loaded||o.trigger("appear")})}),e.bind("resize",function(){t()}),/(?:iphone|ipod|ipad).*os 5/gi.test(navigator.appVersion)&&e.bind("pageshow",function(e){e.originalEvent&&e.originalEvent.persisted&&n.each(function(){$(this).trigger("appear")})}),$(document).ready(function(){t()}),this},$.belowthefold=function(o,t){var i;return i=void 0===t.container||t.container===window?(window.innerHeight?window.innerHeight:e.height())+e.scrollTop():$(t.container).offset().top+$(t.container).height(),i<=$(o).offset().top-t.threshold},$.rightoffold=function(o,t){var i;return i=void 0===t.container||t.container===window?e.width()+e.scrollLeft():$(t.container).offset().left+$(t.container).width(),i<=$(o).offset().left-t.threshold},$.abovethetop=function(o,t){var i;return i=void 0===t.container||t.container===window?e.scrollTop():$(t.container).offset().top,i>=$(o).offset().top+t.threshold+$(o).height()},$.leftofbegin=function(o,t){var i;return i=void 0===t.container||t.container===window?e.scrollLeft():$(t.container).offset().left,i>=$(o).offset().left+t.threshold+$(o).width()},$.inviewport=function(e,o){return!($.rightoffold(e,o)||$.leftofbegin(e,o)||$.belowthefold(e,o)||$.abovethetop(e,o))},$.extend($.expr[":"],{"below-the-fold":function(e){return $.belowthefold(e,{threshold:0})},"above-the-top":function(e){return!$.belowthefold(e,{threshold:0})},"right-of-screen":function(e){return $.rightoffold(e,{threshold:0})},"left-of-screen":function(e){return!$.rightoffold(e,{threshold:0})},"in-viewport":function(e){return $.inviewport(e,{threshold:0})},"above-the-fold":function(e){return!$.belowthefold(e,{threshold:0})},"right-of-fold":function(e){return $.rightoffold(e,{threshold:0})},"left-of-fold":function(e){return!$.rightoffold(e,{threshold:0})}}),General.init(),ImageSmartLoader.init(),$("body").hasClass("post-template")&&General.addIcons()});
!function(e){!function(){var e=function(t){var r=new e.Builder;return r.pipeline.add(e.trimmer,e.stopWordFilter,e.stemmer),r.searchPipeline.add(e.stemmer),t.call(r,r),r.build()};e.version="2.1.5",e.utils={},e.utils.warn=function(e){return function(t){e.console&&console.warn}}(this),e.utils.asString=function(e){return void 0===e||null===e?"":e.toString()},e.FieldRef=function(e,t,r){this.docRef=e,this.fieldName=t,this._stringValue=r},e.FieldRef.joiner="/",e.FieldRef.fromString=function(t){var r=t.indexOf(e.FieldRef.joiner);if(r===-1)throw"malformed field ref string";var i=t.slice(0,r),n=t.slice(r+1);return new e.FieldRef(n,i,t)},e.FieldRef.prototype.toString=function(){return void 0===this._stringValue&&(this._stringValue=this.fieldName+e.FieldRef.joiner+this.docRef),this._stringValue},e.idf=function(e,t){var r=0;for(var i in e)"_index"!=i&&(r+=Object.keys(e[i]).length);var n=(t-r+.5)/(r+.5);return Math.log(1+Math.abs(n))},e.Token=function(e,t){this.str=e||"",this.metadata=t||{}},e.Token.prototype.toString=function(){return this.str},e.Token.prototype.update=function(e){return this.str=e(this.str,this.metadata),this},e.Token.prototype.clone=function(t){return t=t||function(e){return e},new e.Token(t(this.str,this.metadata),this.metadata)},e.tokenizer=function(t){if(null===t||void 0===t)return[];if(Array.isArray(t))return t.map(function(t){return new e.Token(e.utils.asString(t).toLowerCase())});for(var r=t.toString().trim().toLowerCase(),i=r.length,n=[],s=0,o=0;s<=i;s++){var a=r.charAt(s),u=s-o;(a.match(e.tokenizer.separator)||s==i)&&(u>0&&n.push(new e.Token(r.slice(o,s),{position:[o,u],index:n.length})),o=s+1)}return n},e.tokenizer.separator=/[\s\-]+/,e.Pipeline=function(){this._stack=[]},e.Pipeline.registeredFunctions=Object.create(null),e.Pipeline.registerFunction=function(t,r){r in this.registeredFunctions&&e.utils.warn("Overwriting existing registered function: "+r),t.label=r,e.Pipeline.registeredFunctions[t.label]=t},e.Pipeline.warnIfFunctionNotRegistered=function(t){var r=t.label&&t.label in this.registeredFunctions;r||e.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",t)},e.Pipeline.load=function(t){var r=new e.Pipeline;return t.forEach(function(t){var i=e.Pipeline.registeredFunctions[t];if(!i)throw new Error("Cannot load unregistered function: "+t);r.add(i)}),r},e.Pipeline.prototype.add=function(){var t=Array.prototype.slice.call(arguments);t.forEach(function(t){e.Pipeline.warnIfFunctionNotRegistered(t),this._stack.push(t)},this)},e.Pipeline.prototype.after=function(t,r){e.Pipeline.warnIfFunctionNotRegistered(r);var i=this._stack.indexOf(t);if(i==-1)throw new Error("Cannot find existingFn");i+=1,this._stack.splice(i,0,r)},e.Pipeline.prototype.before=function(t,r){e.Pipeline.warnIfFunctionNotRegistered(r);var i=this._stack.indexOf(t);if(i==-1)throw new Error("Cannot find existingFn");this._stack.splice(i,0,r)},e.Pipeline.prototype.remove=function(e){var t=this._stack.indexOf(e);t!=-1&&this._stack.splice(t,1)},e.Pipeline.prototype.run=function(e){for(var t=this._stack.length,r=function(t,r,i){var s=n(r,i,e);return void 0===s||""===s?t:t.concat(s)},i=0;i<t;i++){var n=this._stack[i];e=e.reduce(r,[])}return e},e.Pipeline.prototype.runString=function(t){var r=new e.Token(t);return this.run([r]).map(function(e){return e.toString()})},e.Pipeline.prototype.reset=function(){this._stack=[]},e.Pipeline.prototype.toJSON=function(){return this._stack.map(function(t){return e.Pipeline.warnIfFunctionNotRegistered(t),t.label})},e.Vector=function(e){this._magnitude=0,this.elements=e||[]},e.Vector.prototype.positionForIndex=function(e){if(0===this.elements.length)return 0;for(var t=0,r=this.elements.length/2,i=r-t,n=Math.floor(i/2),s=this.elements[2*n];i>1&&(s<e&&(t=n),s>e&&(r=n),s!=e);)i=r-t,n=t+Math.floor(i/2),s=this.elements[2*n];return s==e?2*n:s>e?2*n:s<e?2*(n+1):void 0},e.Vector.prototype.insert=function(e,t){this.upsert(e,t,function(){throw"duplicate index"})},e.Vector.prototype.upsert=function(e,t,r){this._magnitude=0;var i=this.positionForIndex(e);this.elements[i]==e?this.elements[i+1]=r(this.elements[i+1],t):this.elements.splice(i,0,e,t)},e.Vector.prototype.magnitude=function(){if(this._magnitude)return this._magnitude;for(var e=0,t=this.elements.length,r=1;r<t;r+=2){var i=this.elements[r];e+=i*i}return this._magnitude=Math.sqrt(e),this._magnitude},e.Vector.prototype.dot=function(e){for(var t=0,r=this.elements,i=e.elements,n=r.length,s=i.length,o=0,a=0,u=0,l=0;u<n&&l<s;)o=r[u],a=i[l],o<a?u+=2:o>a?l+=2:o==a&&(t+=r[u+1]*i[l+1],u+=2,l+=2);return t},e.Vector.prototype.similarity=function(e){return this.dot(e)/(this.magnitude()*e.magnitude())},e.Vector.prototype.toArray=function(){for(var e=new Array(this.elements.length/2),t=1,r=0;t<this.elements.length;t+=2,r++)e[r]=this.elements[t];return e},e.Vector.prototype.toJSON=function(){return this.elements},e.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},r="[^aeiou]",i="[aeiouy]",n=r+"[^aeiouy]*",s=i+"[aeiou]*",o="^("+n+")?"+s+n,a="^("+n+")?"+s+n+"("+s+")?$",u="^("+n+")?"+s+n+s+n,l="^("+n+")?"+i,h=new RegExp(o),d=new RegExp(u),c=new RegExp(a),f=new RegExp(l),p=/^(.+?)(ss|i)es$/,g=/^(.+?)([^s])s$/,m=/^(.+?)eed$/,y=/^(.+?)(ed|ing)$/,v=/.$/,x=/(at|bl|iz)$/,w=new RegExp("([^aeiouylsz])\\1$"),b=new RegExp("^"+n+i+"[^aeiouwxy]$"),k=/^(.+?[^aeiou])y$/,S=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,Q=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,L=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,_=/^(.+?)(s|t)(ion)$/,T=/^(.+?)e$/,P=/ll$/,I=new RegExp("^"+n+i+"[^aeiouwxy]$"),O=function(r){var i,n,s,o,a,u,l;if(r.length<3)return r;s=r.substr(0,1),"y"==s&&(r=s.toUpperCase()+r.substr(1)),o=p,a=g,o.test(r)?r=r.replace(o,"$1$2"):a.test(r)&&(r=r.replace(a,"$1$2"));var O;return o=m,a=y,o.test(r)?(O=o.exec(r),o=h,o.test(O[1])&&(o=v,r=r.replace(o,""))):a.test(r)&&(O=a.exec(r),i=O[1],a=f,a.test(i)&&(r=i,a=x,u=w,l=b,a.test(r)?r+="e":u.test(r)?(o=v,r=r.replace(o,"")):l.test(r)&&(r+="e"))),o=k,o.test(r)&&(O=o.exec(r),i=O[1],r=i+"i"),o=S,o.test(r)&&(O=o.exec(r),i=O[1],n=O[2],o=h,o.test(i)&&(r=i+e[n])),o=Q,o.test(r)&&(O=o.exec(r),i=O[1],n=O[2],o=h,o.test(i)&&(r=i+t[n])),o=L,a=_,o.test(r)?(O=o.exec(r),i=O[1],o=d,o.test(i)&&(r=i)):a.test(r)&&(O=a.exec(r),i=O[1]+O[2],a=d,a.test(i)&&(r=i)),o=T,o.test(r)&&(O=o.exec(r),i=O[1],o=d,a=c,u=I,(o.test(i)||a.test(i)&&!u.test(i))&&(r=i)),o=P,a=d,o.test(r)&&a.test(r)&&(o=v,r=r.replace(o,"")),"y"==s&&(r=s.toLowerCase()+r.substr(1)),r};return function(e){return e.update(O)}}(),e.Pipeline.registerFunction(e.stemmer,"stemmer"),e.generateStopWordFilter=function(e){var t=e.reduce(function(e,t){return e[t]=t,e},{});return function(e){if(e&&t[e.toString()]!==e.toString())return e}},e.stopWordFilter=e.generateStopWordFilter(["a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your"]),e.Pipeline.registerFunction(e.stopWordFilter,"stopWordFilter"),e.trimmer=function(e){return e.update(function(e){return e.replace(/^\W+/,"").replace(/\W+$/,"")})},e.Pipeline.registerFunction(e.trimmer,"trimmer"),e.TokenSet=function(){this["final"]=!1,this.edges={},this.id=e.TokenSet._nextId,e.TokenSet._nextId+=1},e.TokenSet._nextId=1,e.TokenSet.fromArray=function(t){for(var r=new e.TokenSet.Builder,i=0,n=t.length;i<n;i++)r.insert(t[i]);return r.finish(),r.root},e.TokenSet.fromClause=function(t){return"editDistance"in t?e.TokenSet.fromFuzzyString(t.term,t.editDistance):e.TokenSet.fromString(t.term)},e.TokenSet.fromFuzzyString=function(t,r){for(var i=new e.TokenSet,n=[{node:i,editsRemaining:r,str:t}];n.length;){var s,o=n.pop();if(o.str.length>0){s=o.str.charAt(0);var a;s in o.node.edges?a=o.node.edges[s]:(a=new e.TokenSet,o.node.edges[s]=a),1==o.str.length?a["final"]=!0:n.push({node:a,editsRemaining:o.editsRemaining,str:o.str.slice(1)})}if(o.editsRemaining>0&&o.str.length>1){s=o.str.charAt(1);var u;s in o.node.edges?u=o.node.edges[s]:(u=new e.TokenSet,o.node.edges[s]=u),o.str.length<=2?u["final"]=!0:n.push({node:u,editsRemaining:o.editsRemaining-1,str:o.str.slice(2)})}o.editsRemaining>0&&1==o.str.length&&(o.node["final"]=!0);var l;o.editsRemaining>0&&o.str.length>=1&&("*"in o.node.edges?l=o.node.edges["*"]:(l=new e.TokenSet,o.node.edges["*"]=l),1==o.str.length?l["final"]=!0:n.push({node:l,editsRemaining:o.editsRemaining-1,str:o.str.slice(1)}));var h;if(o.editsRemaining>0&&("*"in o.node.edges?h=o.node.edges["*"]:(h=new e.TokenSet,o.node.edges["*"]=h),0===o.str.length?h["final"]=!0:n.push({node:h,editsRemaining:o.editsRemaining-1,str:o.str})),o.editsRemaining>0&&o.str.length>1){var d,c=o.str.charAt(0),f=o.str.charAt(1);f in o.node.edges?d=o.node.edges[f]:(d=new e.TokenSet,o.node.edges[f]=d),1==o.str.length?d["final"]=!0:n.push({node:d,editsRemaining:o.editsRemaining-1,str:c+o.str.slice(2)})}}return i},e.TokenSet.fromString=function(t){for(var r=new e.TokenSet,i=r,n=!1,s=0,o=t.length;s<o;s++){var a=t[s],u=s==o-1;if("*"==a)n=!0,r.edges[a]=r,r["final"]=u;else{var l=new e.TokenSet;l["final"]=u,r.edges[a]=l,r=l,n&&(r.edges["*"]=i)}}return i},e.TokenSet.prototype.toArray=function(){for(var e=[],t=[{prefix:"",node:this}];t.length;){var r=t.pop(),i=Object.keys(r.node.edges),n=i.length;r.node["final"]&&e.push(r.prefix);for(var s=0;s<n;s++){var o=i[s];t.push({prefix:r.prefix.concat(o),node:r.node.edges[o]})}}return e},e.TokenSet.prototype.toString=function(){if(this._str)return this._str;for(var e=this["final"]?"1":"0",t=Object.keys(this.edges).sort(),r=t.length,i=0;i<r;i++){var n=t[i],s=this.edges[n];e=e+n+s.id}return e},e.TokenSet.prototype.intersect=function(t){for(var r,i=new e.TokenSet,n=[{qNode:t,output:i,node:this}];n.length;){r=n.pop();for(var s=Object.keys(r.qNode.edges),o=s.length,a=Object.keys(r.node.edges),u=a.length,l=0;l<o;l++)for(var h=s[l],d=0;d<u;d++){var c=a[d];if(c==h||"*"==h){var f,p=r.node.edges[c],g=r.qNode.edges[h],m=p["final"]&&g["final"];c in r.output.edges?(f=r.output.edges[c],f["final"]=f["final"]||m):(f=new e.TokenSet,f["final"]=m,r.output.edges[c]=f),n.push({qNode:g,output:f,node:p})}}}return i},e.TokenSet.Builder=function(){this.previousWord="",this.root=new e.TokenSet,this.uncheckedNodes=[],this.minimizedNodes={}},e.TokenSet.Builder.prototype.insert=function(t){var r,i=0;if(t<this.previousWord)throw new Error("Out of order word insertion");for(var n=0;n<t.length&&n<this.previousWord.length&&t[n]==this.previousWord[n];n++)i++;this.minimize(i),r=0===this.uncheckedNodes.length?this.root:this.uncheckedNodes[this.uncheckedNodes.length-1].child;for(var s=i;s<t.length;s++){var o=new e.TokenSet,a=t[s];r.edges[a]=o,this.uncheckedNodes.push({parent:r,"char":a,child:o}),r=o}r["final"]=!0,this.previousWord=t},e.TokenSet.Builder.prototype.finish=function(){this.minimize(0)},e.TokenSet.Builder.prototype.minimize=function(e){for(var t=this.uncheckedNodes.length-1;t>=e;t--){var r=this.uncheckedNodes[t],i=r.child.toString();i in this.minimizedNodes?r.parent.edges[r["char"]]=this.minimizedNodes[i]:(r.child._str=i,this.minimizedNodes[i]=r.child),this.uncheckedNodes.pop()}},e.Index=function(e){this.invertedIndex=e.invertedIndex,this.fieldVectors=e.fieldVectors,this.tokenSet=e.tokenSet,this.fields=e.fields,this.pipeline=e.pipeline},e.Index.prototype.search=function(t){return this.query(function(r){var i=new e.QueryParser(t,r);i.parse()})},e.Index.prototype.query=function(t){var r=new e.Query(this.fields),i=Object.create(null),n=Object.create(null),s=Object.create(null);t.call(r,r);for(var o=0;o<r.clauses.length;o++){var a=r.clauses[o],u=null;u=a.usePipeline?this.pipeline.runString(a.term):[a.term];for(var l=0;l<u.length;l++){var h=u[l];a=JSON.parse(JSON.stringify(a)),a.term=h;for(var d,c=e.TokenSet.fromClause(a),f=this.tokenSet.intersect(c).toArray(),p=0;p<f.length;p++){var g=f[p],m=this.invertedIndex[g];if(m){d=m._index;for(var y=0;y<a.fields.length;y++){var v=a.fields[y],x=m[v],w=Object.keys(x),b=g+"/"+v;if(void 0===n[v]&&(n[v]=new e.Vector),n[v].upsert(d,1*a.boost,function(e,t){return e+t}),!s[b]){for(var k=0;k<w.length;k++){var S,Q=w[k],L=new e.FieldRef(Q,v),_=x[Q];void 0===(S=i[L])?i[L]=new e.MatchData(g,v,_):S.add(g,v,_)}s[b]=!0}}}}}}var T=Object.keys(i),P=[],I=Object.create(null);for(o=0;o<T.length;o++){var O,E=e.FieldRef.fromString(T[o]),F=E.docRef,D=this.fieldVectors[E],j=n[E.fieldName].similarity(D);if(void 0!==(O=I[F]))O.score+=j,O.matchData.combine(i[E]);else{var R={ref:F,score:j,matchData:i[E]};I[F]=R,P.push(R)}}return P.sort(function(e,t){return t.score-e.score})},e.Index.prototype.toJSON=function(){var t=Object.keys(this.invertedIndex).sort().map(function(e){return[e,this.invertedIndex[e]]},this),r=Object.keys(this.fieldVectors).map(function(e){return[e,this.fieldVectors[e].toJSON()]},this);return{version:e.version,fields:this.fields,fieldVectors:r,invertedIndex:t,pipeline:this.pipeline.toJSON()}},e.Index.load=function(t){var r={},i={},n=t.fieldVectors,s={},o=t.invertedIndex,a=new e.TokenSet.Builder,u=e.Pipeline.load(t.pipeline);t.version!=e.version&&e.utils.warn("Version mismatch when loading serialised index. Current version of lunr '"+e.version+"' does not match serialized index '"+t.version+"'");for(var l,h=0;h<n.length;h++)l=n[h],ref=l[0],elements=l[1],i[ref]=new e.Vector(elements);for(h=0;h<o.length;h++)l=o[h],term=l[0],posting=l[1],a.insert(term),s[term]=posting;return a.finish(),r.fields=t.fields,r.fieldVectors=i,r.invertedIndex=s,r.tokenSet=a.root,r.pipeline=u,new e.Index(r)},e.Builder=function(){this._ref="id",this._fields=[],this.invertedIndex=Object.create(null),this.fieldTermFrequencies={},this.fieldLengths={},this.tokenizer=e.tokenizer,this.pipeline=new e.Pipeline,this.searchPipeline=new e.Pipeline,this.documentCount=0,this._b=.75,this._k1=1.2,this.termIndex=0,this.metadataWhitelist=[]},e.Builder.prototype.ref=function(e){this._ref=e},e.Builder.prototype.field=function(e){this._fields.push(e)},e.Builder.prototype.b=function(e){e<0?this._b=0:e>1?this._b=1:this._b=e},e.Builder.prototype.k1=function(e){this._k1=e},e.Builder.prototype.add=function(t){var r=t[this._ref];this.documentCount+=1;for(var i=0;i<this._fields.length;i++){var n=this._fields[i],s=t[n],o=this.tokenizer(s),a=this.pipeline.run(o),u=new e.FieldRef(r,n),l=Object.create(null);this.fieldTermFrequencies[u]=l,this.fieldLengths[u]=0,this.fieldLengths[u]+=a.length;for(var h=0;h<a.length;h++){var d=a[h];if(void 0===l[d]&&(l[d]=0),l[d]+=1,void 0===this.invertedIndex[d]){var c=Object.create(null);c._index=this.termIndex,this.termIndex+=1;for(var f=0;f<this._fields.length;f++)c[this._fields[f]]=Object.create(null);this.invertedIndex[d]=c}void 0===this.invertedIndex[d][n][r]&&(this.invertedIndex[d][n][r]=Object.create(null));for(var p=0;p<this.metadataWhitelist.length;p++){var g=this.metadataWhitelist[p],m=d.metadata[g];void 0===this.invertedIndex[d][n][r][g]&&(this.invertedIndex[d][n][r][g]=[]),this.invertedIndex[d][n][r][g].push(m)}}}},e.Builder.prototype.calculateAverageFieldLengths=function(){for(var t,r=Object.keys(this.fieldLengths),i=r.length,n={},s={},o=0;o<i;o++){var a=e.FieldRef.fromString(r[o]);t=a.fieldName,(s[t]||(s[t]=0))&&(s[t]+=1),(n[t]||(n[t]=0))&&(n[t]+=this.fieldLengths[a])}for(o=0;o<this._fields.length;o++)t=this._fields[o],n[t]=n[t]/s[t];this.averageFieldLength=n},e.Builder.prototype.createFieldVectors=function(){for(var t={},r=Object.keys(this.fieldTermFrequencies),i=r.length,n=Object.create(null),s=0;s<i;s++){for(var o=e.FieldRef.fromString(r[s]),a=o.fieldName,u=this.fieldLengths[o],l=new e.Vector,h=this.fieldTermFrequencies[o],d=Object.keys(h),c=d.length,f=0;f<c;f++){var p,g,m,y=d[f],v=h[y],x=this.invertedIndex[y]._index;void 0===n[y]?(p=e.idf(this.invertedIndex[y],this.documentCount),n[y]=p):p=n[y],g=p*((this._k1+1)*v)/(this._k1*(1-this._b+this._b*(u/this.averageFieldLength[a]))+v),m=Math.round(1e3*g)/1e3,l.insert(x,m)}t[o]=l}this.fieldVectors=t},e.Builder.prototype.createTokenSet=function(){this.tokenSet=e.TokenSet.fromArray(Object.keys(this.invertedIndex).sort())},e.Builder.prototype.build=function(){return this.calculateAverageFieldLengths(),this.createFieldVectors(),this.createTokenSet(),new e.Index({invertedIndex:this.invertedIndex,fieldVectors:this.fieldVectors,tokenSet:this.tokenSet,fields:this._fields,pipeline:this.searchPipeline})},e.Builder.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},e.MatchData=function(e,t,r){for(var i=Object.create(null),n=Object.keys(r),s=0;s<n.length;s++){var o=n[s];i[o]=r[o].slice()}this.metadata=Object.create(null),this.metadata[e]=Object.create(null),this.metadata[e][t]=i},e.MatchData.prototype.combine=function(e){for(var t=Object.keys(e.metadata),r=0;r<t.length;r++){var i=t[r],n=Object.keys(e.metadata[i]);void 0===this.metadata[i]&&(this.metadata[i]=Object.create(null));for(var s=0;s<n.length;s++){var o=n[s],a=Object.keys(e.metadata[i][o]);void 0===this.metadata[i][o]&&(this.metadata[i][o]=Object.create(null));for(var u=0;u<a.length;u++){var l=a[u];void 0===this.metadata[i][o][l]?this.metadata[i][o][l]=e.metadata[i][o][l]:this.metadata[i][o][l]=this.metadata[i][o][l].concat(e.metadata[i][o][l])}}}},e.MatchData.prototype.add=function(e,t,r){if(!(e in this.metadata))return this.metadata[e]=Object.create(null),void(this.metadata[e][t]=r);if(!(t in this.metadata[e]))return void(this.metadata[e][t]=r);for(var i=Object.keys(r),n=0;n<i.length;n++){var s=i[n];s in this.metadata[e][t]?this.metadata[e][t][s]=this.metadata[e][t][s].concat(r[s]):this.metadata[e][t][s]=r[s]}},e.Query=function(e){this.clauses=[],this.allFields=e},e.Query.wildcard="*",e.Query.wildcard.NONE=0,e.Query.wildcard.LEADING=1,e.Query.wildcard.TRAILING=2,e.Query.prototype.clause=function(t){return"fields"in t||(t.fields=this.allFields),"boost"in t||(t.boost=1),"usePipeline"in t||(t.usePipeline=!0),"wildcard"in t||(t.wildcard=e.Query.wildcard.NONE),t.wildcard&e.Query.wildcard.LEADING&&t.term.charAt(0)!=e.Query.wildcard&&(t.term="*"+t.term),t.wildcard&e.Query.wildcard.TRAILING&&t.term.slice(-1)!=e.Query.wildcard&&(t.term=""+t.term+"*"),this.clauses.push(t),this},e.Query.prototype.term=function(e,t){var r=t||{};return r.term=e,this.clause(r),this},e.QueryParseError=function(e,t,r){this.name="QueryParseError",this.message=e,this.start=t,this.end=r},e.QueryParseError.prototype=new Error,e.QueryLexer=function(e){this.lexemes=[],this.str=e,this.length=e.length,this.pos=0,this.start=0,this.escapeCharPositions=[]},e.QueryLexer.prototype.run=function(){for(var t=e.QueryLexer.lexText;t;)t=t(this)},e.QueryLexer.prototype.sliceString=function(){for(var e=[],t=this.start,r=this.pos,i=0;i<this.escapeCharPositions.length;i++)r=this.escapeCharPositions[i],e.push(this.str.slice(t,r)),t=r+1;return e.push(this.str.slice(t,this.pos)),this.escapeCharPositions.length=0,e.join("")},e.QueryLexer.prototype.emit=function(e){this.lexemes.push({type:e,str:this.sliceString(),start:this.start,end:this.pos}),this.start=this.pos},e.QueryLexer.prototype.escapeCharacter=function(){this.escapeCharPositions.push(this.pos-1),this.pos+=1},e.QueryLexer.prototype.next=function(){if(this.pos>=this.length)return e.QueryLexer.EOS;var t=this.str.charAt(this.pos);return this.pos+=1,t},e.QueryLexer.prototype.width=function(){return this.pos-this.start},e.QueryLexer.prototype.ignore=function(){this.start==this.pos&&(this.pos+=1),this.start=this.pos},e.QueryLexer.prototype.backup=function(){this.pos-=1},e.QueryLexer.prototype.acceptDigitRun=function(){var t,r;do t=this.next(),r=t.charCodeAt(0);while(r>47&&r<58);t!=e.QueryLexer.EOS&&this.backup()},e.QueryLexer.prototype.more=function(){return this.pos<this.length},e.QueryLexer.EOS="EOS",e.QueryLexer.FIELD="FIELD",e.QueryLexer.TERM="TERM",e.QueryLexer.EDIT_DISTANCE="EDIT_DISTANCE",e.QueryLexer.BOOST="BOOST",e.QueryLexer.lexField=function(t){return t.backup(),t.emit(e.QueryLexer.FIELD),t.ignore(),e.QueryLexer.lexText},e.QueryLexer.lexTerm=function(t){if(t.width()>1&&(t.backup(),t.emit(e.QueryLexer.TERM)),t.ignore(),t.more())return e.QueryLexer.lexText},e.QueryLexer.lexEditDistance=function(t){return t.ignore(),t.acceptDigitRun(),t.emit(e.QueryLexer.EDIT_DISTANCE),e.QueryLexer.lexText},e.QueryLexer.lexBoost=function(t){return t.ignore(),t.acceptDigitRun(),t.emit(e.QueryLexer.BOOST),e.QueryLexer.lexText},e.QueryLexer.lexEOS=function(t){t.width()>0&&t.emit(e.QueryLexer.TERM)},e.QueryLexer.termSeparator=e.tokenizer.separator,e.QueryLexer.lexText=function(t){for(;;){var r=t.next();if(r==e.QueryLexer.EOS)return e.QueryLexer.lexEOS;if(92!=r.charCodeAt(0)){if(":"==r)return e.QueryLexer.lexField;if("~"==r)return t.backup(),t.width()>0&&t.emit(e.QueryLexer.TERM),e.QueryLexer.lexEditDistance;if("^"==r)return t.backup(),t.width()>0&&t.emit(e.QueryLexer.TERM),e.QueryLexer.lexBoost;if(r.match(e.QueryLexer.termSeparator))return e.QueryLexer.lexTerm}else t.escapeCharacter()}},e.QueryParser=function(t,r){this.lexer=new e.QueryLexer(t),this.query=r,this.currentClause={},this.lexemeIdx=0},e.QueryParser.prototype.parse=function(){this.lexer.run(),this.lexemes=this.lexer.lexemes;for(var t=e.QueryParser.parseFieldOrTerm;t;)t=t(this);return this.query},e.QueryParser.prototype.peekLexeme=function(){return this.lexemes[this.lexemeIdx]},e.QueryParser.prototype.consumeLexeme=function(){var e=this.peekLexeme();return this.lexemeIdx+=1,e},e.QueryParser.prototype.nextClause=function(){var e=this.currentClause;this.query.clause(e),this.currentClause={}},e.QueryParser.parseFieldOrTerm=function(t){var r=t.peekLexeme();if(void 0!==r)switch(r.type){case e.QueryLexer.FIELD:return e.QueryParser.parseField;case e.QueryLexer.TERM:return e.QueryParser.parseTerm;default:var i="expected either a field or a term, found "+r.type;throw r.str.length>=1&&(i+=" with value '"+r.str+"'"),new e.QueryParseError(i,r.start,r.end)}},e.QueryParser.parseField=function(t){var r=t.consumeLexeme();if(void 0!==r){var i;if(t.query.allFields.indexOf(r.str)==-1){var n=t.query.allFields.map(function(e){return"'"+e+"'"}).join(", ");throw i="unrecognised field '"+r.str+"', possible fields: "+n,new e.QueryParseError(i,r.start,r.end)}t.currentClause.fields=[r.str];var s=t.peekLexeme();if(void 0===s)throw i="expecting term, found nothing",new e.QueryParseError(i,r.start,r.end);switch(s.type){case e.QueryLexer.TERM:return e.QueryParser.parseTerm;default:throw i="expecting term, found '"+s.type+"'",new e.QueryParseError(i,s.start,s.end)}}},e.QueryParser.parseTerm=function(t){var r=t.consumeLexeme();if(void 0!==r){t.currentClause.term=r.str.toLowerCase(),r.str.indexOf("*")!=-1&&(t.currentClause.usePipeline=!1);var i=t.peekLexeme();if(void 0===i)return void t.nextClause();switch(i.type){case e.QueryLexer.TERM:return t.nextClause(),e.QueryParser.parseTerm;case e.QueryLexer.FIELD:return t.nextClause(),e.QueryParser.parseField;case e.QueryLexer.EDIT_DISTANCE:return e.QueryParser.parseEditDistance;case e.QueryLexer.BOOST:return e.QueryParser.parseBoost;default:var n="Unexpected lexeme type '"+i.type+"'";throw new e.QueryParseError(n,i.start,i.end)}}},e.QueryParser.parseEditDistance=function(t){var r=t.consumeLexeme();if(void 0!==r){var i,n=parseInt(r.str,10);if(isNaN(n))throw i="edit distance must be numeric",new e.QueryParseError(i,r.start,r.end);t.currentClause.editDistance=n;var s=t.peekLexeme();if(void 0===s)return void t.nextClause();switch(s.type){case e.QueryLexer.TERM:return t.nextClause(),e.QueryParser.parseTerm;case e.QueryLexer.FIELD:return t.nextClause(),e.QueryParser.parseField;case e.QueryLexer.EDIT_DISTANCE:return e.QueryParser.parseEditDistance;case e.QueryLexer.BOOST:return e.QueryParser.parseBoost;default:throw i="Unexpected lexeme type '"+s.type+"'",new e.QueryParseError(i,s.start,s.end)}}},e.QueryParser.parseBoost=function(t){var r,i=t.consumeLexeme();if(void 0!==i){var n=parseInt(i.str,10);if(isNaN(n))throw r="boost must be numeric",new e.QueryParseError(r,i.start,i.end);t.currentClause.boost=n;var s=t.peekLexeme();if(void 0===s)return void t.nextClause();switch(s.type){case e.QueryLexer.TERM:return t.nextClause(),e.QueryParser.parseTerm;case e.QueryLexer.FIELD:return t.nextClause(),e.QueryParser.parseField;case e.QueryLexer.EDIT_DISTANCE:return e.QueryParser.parseEditDistance;case e.QueryLexer.BOOST:return e.QueryParser.parseBoost;default:throw r="Unexpected lexeme type '"+s.type+"'",new e.QueryParseError(r,s.start,s.end)}}},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.lunr=t()}(this,function(){return e})}(),function(e,t){"function"==typeof define&&"object"==typeof define.amd&&define.amd?define(function(){return t(e)}):"object"==typeof module&&module&&module.exports?module.exports=t(e):e.Levenshtein=t(e)}(this,function(e){function t(e,t){var r,i;for(r=-1,i=e.length;++r<i;)t(e[r],r,e)}function r(e,r){var i;return i=Array(e.length),t(e,function(e,t,n){i.push(r(e,t,n))}),i}function i(e,r,i){return t(e,function(e,t,n){i=r(e,t,n)}),i}function n(e,t){return e.charAt(t)}function s(e,t){return e[t]}function o(e,r){var i,o,a,u;if("string"==typeof e&&"string"==typeof r)u=n;else{if("object"!=typeof e||"object"!=typeof r)throw"Levensthtein: input must be two strings or two arrays";u=s}return a=this._matrix=[],e==r?(this.distance=0,this.distance):""===e?(this.distance=r.length,this.distance):""===r?(this.distance=e.length,this.distance):(i=[0],t(e,function(e,t){t++,i[t]=t}),a[0]=i,t(r,function(n,s){o=[++s],t(e,function(t,n){n++,u(e,n-1)==u(r,s-1)?o[n]=i[n-1]:o[n]=Math.min(i[n]+1,o[n-1]+1,i[n-1]+1)}),i=o,a[a.length]=i}),this.distance=o[o.length-1],this.distance)}return o.prototype.toString=o.prototype.inspect=function(e){var t,n,s,o,a;for(t=this.getMatrix(),n=i(t,function(e,t){return Math.max(e,i(t,Math.max,0))},0),s=Array((n+"").length).join(" "),o=[];o.length<(t[0]&&t[0].length||0);)o[o.length]=Array(s.length+1).join("-");return o=o.join("-+")+"-",a=r(t,function(e){var t;return t=r(e,function(e){return(s+e).slice(-s.length)}),t.join(" |")+" "}),a.join("\n"+o+"\n")},o.prototype.getSteps=function(){var e,t,r,i,n,s,o,a;for(e=[],t=this.getMatrix(),r=t.length-1,i=t[0].length-1;0!==r||0!==i;)n=i>0?t[r][i-1]:Number.MAX_VALUE,s=r>0?t[r-1][i]:Number.MAX_VALUE,o=i>0&&r>0?t[r-1][i-1]:Number.MAX_VALUE,a=Math.min(n,s,o),a===o?(o<t[r][i]&&e.push(["substitute",i,r]),r--,i--):a===s?(e.push(["insert",i,r]),r--):(e.push(["delete",i,r]),i--);return e},o.prototype.getMatrix=function(){return this._matrix.slice()},o.prototype.valueOf=function(){return this.distance},o}),e.fn.ghostHunter=function(t){var r=e.extend({},e.fn.ghostHunter.defaults,t);if(r.results)return a.init(this,r),a},e.fn.ghostHunter.defaults={resultsData:!1,onPageLoad:!0,onKeyUp:!1,result_template:"<a id='gh-{{ref}}' class='gh-search-item' href='{{link}}'><p><h2>{{title}}</h2><h4>{{prettyPubDate}}</h4></p></a>",info_template:"<p>Number of posts found: {{amount}}</p>",displaySearchInfo:!0,zeroResultsInfo:!0,before:!1,onComplete:!1,includepages:!1,filterfields:!1,subpath:"",item_preprocessor:!1,indexing_start:!1,indexing_end:!1};var t=function(e){var t=new Date(e),r=["January","February","March","April","May","June","July","August","September","October","November","December"];return t.getDate()+" "+r[t.getMonth()]+" "+t.getFullYear()},r=function(e){return e.replace(/^\//,"").replace(/\//g,"-")},i=null,n=function(){e(".gh-search-item").each(function(){var e=this.getAttribute("id"),t=e.replace(/^new-/,"");this.setAttribute("id",t)})},s=function(e,t,r){for(var i=0,s=r.length;i<s;i++){var o=r[i];if("delete"==o[0])e.eq(o[1]-1).remove();else{var a=t[o[2]-1].ref,u=this.blogData[a],l=this.format(this.result_template,u);if("substitute"===o[0])e.eq(o[1]-1).replaceWith(l);else if("insert"===o[0]){var h;h=0===o[1]?null:o[1]-1,e.eq(h).after(l)}}}n()},o=function(){this.blogData={},this.latestPost=0;var i={limit:"all",include:"tags",formats:["plaintext"]};this.includepages&&(i.filter="(page:true,page:false)");var n=this;e.get(ghost.url.api("posts",i)).done(function(e){var i=e.posts;n.index=lunr(function(){this.ref("id"),this.field("title"),this.field("description"),this.field("plaintext"),this.field("pubDate"),this.field("tag"),i.forEach(function(e){var r=new Date(e.updated_at).getTime(),i=new Date(n.latestPost).getTime();r>i&&(n.latestPost=e.updated_at);var s=e.tags.map(function(e){return e.name});null===e.meta_description&&(e.meta_description="");var o=s.join(", ");o.length<1&&(o="undefined");var a={id:String(e.id),title:String(e.title),description:String(e.custom_excerpt),plaintext:String(e.plaintext),pubDate:String(e.published_at),tag:o};this.add(a);var u=n.subpath+e.url;n.blogData[e.id]={title:e.title,description:e.meta_description,pubDate:t(a.pubDate),link:u,tags:s},n.item_preprocessor&&Object.assign(n.blogData[e.id],n.item_preprocessor(e))},this)});try{var s=r(n.subpath);localStorage.setItem("ghost_"+s+"_lunrIndex",JSON.stringify(n.index)),localStorage.setItem("ghost_"+s+"_blogData",JSON.stringify(n.blogData)),localStorage.setItem("ghost_"+s+"_latestPost",n.latestPost)}catch(o){}n.indexing_end&&n.indexing_end(),n.isInit=!0})},a={isInit:!1,init:function(e,t){var r=this;Object.assign(this,t);var i=function(){};t.onPageLoad?(i=function(){r.loadAPI()},window.setTimeout(i,1)):e.focus(function(){r.loadAPI()}),e.closest("form").submit(function(t){t.preventDefault(),r.find(e.val())}),t.onKeyUp&&(e.keydown(function(e){if(13===e.which)return!1}),e.keyup(function(t){r.find(e.val())}))},loadAPI:function(){if(!this.isInit){this.indexing_start&&this.indexing_start();try{var t=r(this.subpath);this.index=localStorage.getItem("ghost_"+t+"_lunrIndex"),this.blogData=localStorage.getItem("ghost_"+t+"_blogData"),this.latestPost=localStorage.getItem("ghost_"+t+"_latestPost"),this.latestPost&&this.index&&this.blogData&&(this.latestPost=this.latestPost,this.index=lunr.Index.load(JSON.parse(this.index)),this.blogData=JSON.parse(this.blogData),this.isInit=!0)}catch(i){}}if(this.isInit){var n={limit:"all",filter:"updated_at:>'"+this.latestPost.replace(/\..*/,"").replace(/T/," ")+"'",fields:"id"},s=this;e.get(ghost.url.api("posts",n)).done(function(e){e.posts.length>0?o.call(s):(s.indexing_end&&s.indexing_end(),s.isInit=!0)})}else o.call(this)},find:function(t){clearTimeout(i),t||(t=""),t=t.toLowerCase(),i=setTimeout(function(){for(var r=[],i=t.split(/\s+/),o=0,a=i.length;o<a;o++){var u=i[o];u&&r.push(this.index.query(function(e){e.term(u,{usePipeline:!0,boost:100}),e.term(u,{usePipeline:!1,boost:10,wildcard:lunr.Query.wildcard.TRAILING}),e.term(u,{usePipeline:!1,editDistance:1,boost:1})}))}var l;if(r.length>1)for(l=r[0],r=r.slice(1),o=l.length-1;o>-1;o--){var h=l[o].ref;for(j=0,jlen=r.length;j<jlen;j++){for(var d={},c=0,f=r[j].length;c<f;c++)d[r[j][c].ref]=!0;if(!d[h]){l=l.slice(0,o).concat(l.slice(o+1));break}}}else l=1===r.length?r[0]:[];var p=e(this.results),g=[];for(0===l.length?(p.empty(),this.displaySearchInfo&&this.zeroResultsInfo&&p.append(this.format(this.info_template,{amount:0}))):this.displaySearchInfo&&(p.length>0?p.children().eq(0).replaceWith(this.format(this.info_template,{amount:l.length
})):p.append(this.format(this.info_template,{amount:l.length}))),this.before&&this.before(),o=0;o<l.length;o++){var m=l[o].ref,y=this.blogData[m];y&&(y.ref=m,g.push(y))}var v=e(".gh-search-item"),x=v.map(function(){return this.id.slice(3)}).get();if(0===x.length){for(o=0,a=g.length;o<a;o++)p.append(this.format(this.result_template,g[o]));n()}else{var w=[];for(o=0,a=l.length;o<a;o++)w.push(l[o].ref);var b=new Levenshtein(x,w),k=b.getSteps();s.call(this,v,l,k)}this.onComplete&&this.onComplete(g)}.bind(this),100)},clear:function(){e(this.results).empty()},format:function(e,t){return e.replace(/{{([^{}]*)}}/g,function(e,r){var i=t[r];return"string"==typeof i||"number"==typeof i?i:e})}}}(jQuery);
!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)}(function(e){"use strict";var n=function(e){if("string"!=typeof e)return 0;var n=e.match(/\d/g);return n?Math.min.apply(null,n):1},t=function(n,t){for(;t--;)n=e("<ol/>").appendTo(n),t&&(n=e("<li/>").appendTo(n));return n},r=function(e,n){for(;n--;)e=e.parent();return e},o=function(e,n){return function(t,r,o){var i=t.text(),a=n+"-"+o;r.text(i);var c=t[0],f=r[0],u=e?a:c.id||a;u=encodeURIComponent(u),c.id=u,f.href="#"+u}},i=function(i){var a=i.selector,c=i.scope,f=e("<ol/>"),u=f,p=null,s=n(a),l=o(i.overwrite,i.prefix);return e(c).find(a).each(function(o,i){var a=n(i.tagName),c=a-s;c>0&&(u=t(p,c)),c<0&&(u=r(u,2*-c)),u.length||(u=f);var h=e("<li/>"),d=e("<a/>");l(e(i),d,o),h.append(d).appendTo(u),p=h,s=a}),f};e.fn.initTOC=function(n){var t={selector:"h1, h2, h3, h4, h5, h6",scope:"body",overwrite:!1,prefix:"toc"};n=e.extend(t,n);var r=n.selector;if("string"!=typeof r)throw new TypeError("selector must be a string");if(!r.match(/^(?:h[1-6],?\s*)+$/g))throw new TypeError("selector must contains only h1-6");e(this).append(i(n));var o=location.hash;return o&&setTimeout(function(){var e=document.getElementById(o.slice(1));e&&e.scrollIntoView()},0),e(this)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
